{"pages":[],"posts":[{"title":"Cuda 配置","text":"在服务器上使用cuda遇到一些问题，在此记录。 在 torch.cuda.is_available() 返回 False最主要的问题是在 python 中输入torch.cuda.is_available()时，返回 False。 猜测应该是某种版本不匹配造成的问题。 于是先查询版本。 通过nvidia-smi 查询到的版本为 CUDA Version: 11.0， 和我安装的pytorch对应的cuda10.0不兼容。 于是下载对应版本即可解决，注意与 python 发行版的冲突。(下载贼慢) 1conda install pytorch torchvision cudatoolkit=11.0 -c pytorch 查询版本查询版本有三种方法。 1nvidia-smi 这个命令既可以查cuda的驱动API版本，也可以查看GPU运行状态。 查询到的版本为： NVIDIA-SMI 450.57 Driver Version: 450.57 CUDA Version: 11.0 。最终需要匹配的版本以此命令为准。 1cat /usr/local/cuda/version.txt CUDA Version 10.0.130 1nvcc --version Cuda compilation tools, release 10.0, V10.0.130 有时会显示command not found，解决方法见此。 nvcc –version command not found首先查看 1ls /usr/local/cuda/bin 存在nvcc命令，此时配置环境变量即可。 .bashrc12export PATH=/usr/local/cuda/bin:$PATHexport LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH 然后更新配置文件。 source ~/.bashrc","link":"/2020/12/04/Cuda/"},{"title":"Docker","text":"Docker 使用过程中的一点记录。大部分内容来源于此教程。 简单介绍Docker 包括三个基本概念: 镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。 Docker 容器通过 Docker 镜像来创建。 容器与镜像的关系类似于面向对象编程中的对象与类。 基础命令Docker run 可以在容器内运行一个应用程序。 1$ docker run ubuntu /bin/echo &quot;Hello world&quot; 以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。 12$ docker images #检查有哪些镜像$ docker ps –a #检查有哪些容器 12345678910$ docker run -it ubuntu /bin/bash #运行交互式容器$ docker run -itd ubuntu /bin/bash #后台启动容器$ exit (ctrl+D) #容器内退出容器$ docker stop [id/name] #停止容器（在容器外）$ docker start [id/name] 启用停止的容器$ docker restart [id/name] #重启容器$ docker exec -it [id/name] #进入容器$ docker attach [id/name] #进入容器，退出终端导致容器停止$ docker rm [id/name] #删除容器$ docker rmi [id/name] #删除镜像 创建镜像更新镜像当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，需要对镜像进行更改。 一般有两种方法： 从已经创建的容器中更新镜像，并且提交这个镜像 使用 Dockerfile 指令来创建一个新的镜像 此处我们只考虑更新镜像。 123456$ docker run -it ubuntu /bin/bash # Open a container$ /# # Do modification$ exit # exit container# Create image$ docker commit -m=&quot;has update&quot; -a=&quot;user&quot; container_id image_name 镜像备份1docker save -o image_name.tar image_name 执行后，运行 ls 命令即可看到打成的 tar 包 镜像恢复与迁移首先我们先删除掉 image_name 镜像，然后执行以下命令进行恢复。 1docker load -i image_name.tar 执行后再次查看镜像，可以看到镜像已经恢复。","link":"/2020/11/25/Docker/"},{"title":"Hexo-Trials","text":"本文记录使用Hexo中遇到的很多坑，以后可能会重复遇到，记录在此，以观后效。 功能&amp;支持Markdown image insertion grammar support具体配置的方法 123456_config.ymlpost_asset_folder: truemarked: prependRoot: true postAsset: true 运行&amp;测试坑Local server存在local server无法打开或打开极慢，但是GitHub Action正常部署的情况。 此时使用全局代理可解决。 经查原因为在编译HTML时，难以获取all.css文件，fontawesome.com需要代理访问。 将该网站加入代理规则即可解决。","link":"/2020/11/13/Hexo-Trials/"},{"title":"Hexo常用功能说明","text":"本文档会用作Hexo基本用法记录演示。 Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing Generate static files + Run server123$ hexo clean # Clean local files$ hexo generate # Generate static files$ hexo server # Build local server More info: Server More info: Generating Deploy to remote sites (use Gitbuh Action)The procedure is in .github/workflows/deploy.yml When this local git folder has been uploaded to github, the deploy.yml would be executed. More info: Deployment 文章折叠1&lt;!-- more --&gt; 文章间引用站内文章引用语法如下。 1{% post_link file_name Title_of_link %} Insert figures不同于markdown的图片引用方法，Hexo有着自己的语法。 图片文件夹位于_post目录下 1{% asset_img test.jpg%} 同时可以自定义图片大小。 语法与html语法相同。 1&lt;div style=&quot;width:70%;margin:auto&quot;&gt;{% asset_img test.jpg%}&lt;/div&gt; markdone的语法需要配置之后才可以使用，具体配置的方法见这篇文章 1![Test](test.jpg)","link":"/2020/11/13/Hexo%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E/"},{"title":"Icarus 主题设置","text":"本文内容都与当前使用的主题 Icarus 相关。 具体的主题设置可以见此链接，对应的 markdown 源代码可以见此链接。 布局设施侧边栏设置sidebar中某个侧边栏的sticky为true来让它的位置固定而不跟随页面滚动。 _config.icarus.yml12345sidebar: left: sticky: false right: sticky: true","link":"/2020/11/24/Icarus-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"},{"title":"苹果日常使用操作记录","text":"不得不说在多年的MacOS使用过程中还是有很多不方便的地方。 本帖记录一些经常遇到的问题与解决方法。 外接显示器音频设置MacOS是不可以通过HDMI/DP控制外接显示器的音量输出的。 但是黑苹果是一定要外接显示器，同时使用显示器自带的扬声器是极为方便的，所以这是一个需要解决的问题。 目前来看有三种解决方案： Soundflower配套方案 Monitor Control插件 Sound Control插件 其中Monitor Control在我的黑苹果上只可以调节亮度无法调节声音。 Sound Control试用期内可以使用（单独条件app声音），但是试用期过后无法通过调节全局声音来调整显示器输出。 Soundflower方案之前在黑苹果上一直使用，后来重装系统之后出现了蜂鸣现象。 考虑到SF方案体验很不错，于是尝试解决蜂鸣现象。 先简要介绍，SF方案需要下载Soundflower插件与相应的客户端Soundflower Bed（菜单栏插件）。 简单配置即可使用，此处省略，可以使用全局的音量调节调整显示器音量。 但是使用过程中存在播放一定时间后，出现蜂鸣Humming/Bizz，在之后便无音量输出，由于SF项目已经多年未维护，所以在issue里看大家讨论的结果。 问题出现的直接原因是Buffer size过小，溢出时就会出现此问题。 治标不治本的方法时直接选择最大的Buffer size，但是时间过长时还是会出现此类问题。 从大家的讨论中得出，问题出现的根本原因是Soundflower可能存在内置时钟与设备时钟不符，才导致缓冲区最终会溢出。 一篇2014年的帖子给出了方案. 新建一个”聚合设备”（名称必须用英文），时钟源设置为”Soundflower(2ch)”，实体设备显示器勾上“漂移修正”，然后就可以拿给Soundflower用了。 问题解决。 外接2K显示屏开启HiDPIMacbook外接大部分2K显示器时并不会开启HiDPI，需要手动开启。 开启方法很多帖子写的很详细了，详见此链接。 印象中是有一些坑，待下次再设置的时候更新。 Google Software Update 自启动详见这篇文章。","link":"/2020/11/14/MacOS%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"},{"title":"Pytorch 踩坑","text":"用 Pytorch 时出现一些坑，在此记录一下。 Dataloader 中的 num_workers 造成训练循环缓慢在本地跑实验，一个简单的网络的训练，发现 Dataloader 中 num_workers 设置的数目越大，在 batch 中训练越耗时，表示莫名其妙。在我的情形下将其设为8要比将其设为0慢了百倍以上。 仔细看了一下 mini-batch 的训练过程并且记录了一下时间，发现主要的时间开销发生于 for 循环遍历 loader 之后退出循环时。 所还还是将其设为了0。 造成这个的主要原因可能是 IO 耗时和模型前/后传耗时之间的 GAP 太大，导致进程间造成了阻塞，详见这篇文章。","link":"/2020/12/09/Pytorch/"},{"title":"Miniconda","text":"Miniconda 与 Anaconda 为 conda 的发行版，主要用于包管理，其中 miniconda 更轻量级。 由于日常使用总是会忘记，所以此处记录一些常用的命令。 安装首先从清华源下载安装包并安装。 123wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-4.5.11-Linux-x86_64.shbash Miniconda2-4.5.11-Linux-x86_64.shsource ~/.bashrc Conda 默认的软件源在国外,速度非常的慢,我们可以将其更换为清华源。 可以直接在.condarc中添加 .condarc1234- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/- https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/- https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ 配置创建所需要环境 1conda create -n py3.8 python=3.8 激活环境 1conda activate py3.8 然后下包 1conda install XXX 退出环境 1conda deactivate py3.8","link":"/2020/12/04/miniconda/"},{"title":"亲密关系","text":"《亲密关系》 克里斯多福·孟 极简简介这是一本介绍亲密关系的书，两性关系为主（relationship）。 其重点讲的是从作者角度出发亲密关系中不愉快的成因及少数他认为的解决办法。 个人看法间断地浏览了一遍这本书，或许遗漏了重点，此处仅以自己印象来进行评价。 可能有些地方记错记漏，但是无所谓，不喜勿喷。 以下所有仅从个人角度出发。 极简评价并不是一本可以学到知识的书，但是如果比较善于推广反思，倒是可能会有一些收获。 正常人不建议阅读。 家庭或者感情情况乱七八糟的可以适当阅读。 缺点（喜爱挑毛病） 自己造定义，但是讲述又不严谨。 所以这本书不能以工具书的角度来看，但也不能以闲书的角度来看，我就因为总忘了定义导致可能理解有出入。 几乎把所有的问题归因到了原生家庭和小时候的痛苦。 不失有一定道理，但是看了整本书都是这么一套 cliche ，便觉得有点点肤浅了。 很多问题都是由他自己的经验出发举例说明。或者说讲了很多有的没的的故事。 举例论述其实并不很有说服力，且不具有覆盖性。 给人一种看起来这个人怎么这么善于反思这么厉害的样子。（成功学大师的影子） 很多说得很绝对的话，虽然可能有一定道理，但是明明是 opinion 却以一种 fact 的样子讲出来，让人不舒服。 举例：“我们所看到的每件事，其实都是我们内心的投射，我们怎么评论别人就是我们怎么看待自己。” 其实没有提到有效的解决方案。 只是很乐观的提沟通，提去爱，神神叨叨的讲什么灵魂真理。 他其实提倡对伴侣没有期望。 Ridiculous 感想/看法 这个作者每次讲观点总是说的不是很一致（说的不清楚，可能他自己也没搞清楚），而且最后也总是引到奇奇怪怪的结论。所以我此处给他的观点总结一下，这也可能是这个作者唠唠叨叨写了一本书想讲的东西。反正我总结完觉得还是有点道理。 其实很多亲密关系中面临的问题都只是导火索，究其根本，悲伤失落或者生气的原因都不是导火索看起来的那样子。【背景】 这件事其实很多人意识不到，以为只是导火索这件事的问题（或者说很多过去的没点燃的导火索的问题）。【背景】 稍微深一点的原因在于不同的人生活上需求可能不同（eg. 不同的生活习惯）。【过度】 更深层的原因在于心理上的需求，这一点不同人可能是相同的（eg. 都希望被尊重）。【原因】 对于心理上的需求可沟通解决。【解决】 其实面对很多问题的时候，跳出事件本身，客观的想一想自己要什么可能会好一些。 我不认为要无期望或者低期望。 我觉得人与人之间的相处总是以期望为前提的，无期望这件事太理想化了。 但是对人的期望最好同时也是对自己的期望。比如你期望伴侣让你快乐，为什么不可以自己快乐呢？当自己内心强大的时候，对别人期望的落空其实并没有那么难以接受。 句段摘录可能是一些我觉得可能有点道理的话。 最悲哀的是，在得到满足前，我们不愿意去爱自己的伴侣，紧抱着需求不放手，又不让自己去爱。 我们真正需要的，没有人能给。 如果对别人取悦我们的能力抱有太大的期望，那么失望便会是必然的结果。 不满意时，问问自己此时此刻希望从伴侣身上得到什么。 愿不愿意放弃这项期望，是由自己满足还是由伴侣满足。 我们宁愿争吵也不愿面对伤口，是因为生气比承受心碎简单的多。 过去的创伤并不会随着时间逝去。每个自我局限的信念，都来自于过去的创伤。 找出这些信念在我们心中驻足的所在，将会很有帮助。 亲密关系让我们有机会面对并治好旧伤，从而改变衍生自伤痛的错误想法。 当被卷进权力斗争的漩涡时，你一定要切记，我生气的原因不是我自己想的那回事。 对伴侣发怒的原因 麻痹自身心中的痛 是对方有罪恶感，有效控制对方的行为 如果无力掌控大局又不想感觉能力不足，或没安全感，最快的解决方法就是证明自己是对的。 如果你相信对亲密关系，你只需要付一半的责任，那么，即使你能付出百分之百，实际付出的，却只有50%。既然你所看到的一切都是你内心的投射。你就会发现伴侣，也只是付出50%。这样一来，你们两人都会坚持自己已经做了自己该做的那一份，却指责对方不肯尽全力。 只有当你愿意为发生在自己身上的事情完全负责的时候，你才能得到选择的力量。 如果你为了伴侣牺牲，那么你就会把对方看成是利用你的人，因为他们没有尽他们应尽的力量。 虽然弥补伴侣的放纵不是你的责任，但对方的放纵行为的确是你的责任。这句话的意思是你有能力对伴侣的行为作出响应，而不是采取牺牲的方式。 我们所看到的每件事，其实都是我们内心的投射，我们怎么评论别人就是我们怎么看待自己。","link":"/2020/12/05/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/"},{"title":"","text":"我国多层次资本市场建设主讲人：肖刚（中国证监会前主席） 日期：2020-11-19 十四五金融工作八大任务： 建设现代央行制度（1983建立，农业改革到企业改革，为金融发展提供历史性条件） 构建金融支持实体经济的体制机制 国有商业银行改革 市场枢纽，注册制，常态化退市，提高融资比重 金融双向开放 完善监管体系、透明度、法制化 整治乱象 防范风险 1. 主要内容（PPT总结归纳而来）1.1. 重要意义多层次资本市场强调资本市场枢纽功能（举例2013钱荒)： 微观主体活力、稳健货币政策、资本市场功能 $\\rightarrow$ 相互支撑 社会的需要推动政策的变动。 多层次资本市场是我国特有术语： 以金融工具类别来分：股债衍生品 以交易场所来分：场内场外市场。交易所市场，产权交易市场（中央最新文件，并列为新市场体系） 以发行方式来分：公募大众的市场，私募小众的市场 多层次资本市场重要意义： 改善融资结构服务实体经济 促进科技创新 满足财富管理需求 提高直接融资比重防范金融风险 扩大开放提升影响力 助力内循环与双循环： 资源配置能力 风险分担能力 市场约束能力 “技术创新+资本市场”是产业升级的强大推动力。 存在两大问题： 科技成果转化专业化服务体系不健全， 高校、科研与市场供需对接不畅。 信用评价体系缺乏差异化、针对性。知识产权融资有限、质押率偏低、不良率较高。 投贷联动有待完善。 1.2. 私募市场私募基金服务实体经济（2019年3季度末） 累计投资境内未上市未挂牌企业股权、新三板企业股权和再融 资项目数量达到11.18万个，形成股权资本金6.36万亿元。所投资账面价值分布，股权类资产占比46.2%。 2018年向境内未上市挂牌企业股权本金新增1.22万亿元，相当于同期新增社会融资规模的6.3%。 在投中小企业项目5.98万个，本金2万亿；在投高新技术企业 3.1万个，本金1.27万亿。 资金主要来源于：企业&gt;资管计划&gt;居民 1.3. 交易所市场中国上市公司海外收入比较低。 A股再融资政策调整： 非公开发行对象数量上限分别由10名和5名（创业板） 统一调 整到35名。 非公开发行价格由原先不得低于定价基准日前20个交易 日均价的90%，改成80%，吸引投资者，降低发行难度。 非公开发行锁定期缩短，原规定控股股东36个月、普通 投资者2个月不得转入，分别减半，改为18个月和6个月，不再受减持规则限制。 A股行业表现： 高增长、不稳定：5G、新能源、军工、半导体、互联 网、券商、创业板、中证1000。牛市涨得多，熊市跌 得多。 高增长、很稳定：医疗、医药、消费、白酒、食品饮 料、家电。牛市涨得多，熊市跌得少。 低增长，不景气：煤炭、纺织、有色、钢铁、能源、 化工、交通。牛市涨得少，熊市跌得多。 高股息、低增长：机械设备、电力、金融、地产、上 证50。牛市涨得少，熊市跌得少。 北向资金： 北向资金占外资持股近七成（2019年底）。 对A股有明显领先性，多次精准抄底“聪明钱”，作为投资决策的一个参考。 北向资金类型： 配置型资金，主要跟踪MSCI等指数 套利型资金（个股、指数、汇率间的利差），如离岸人民币汇率走高，北向资金流出，A股下跌 北向资金择股： 行业发展成熟，在产业链上具有高溢价。 所处行业壁垒高，短时间很难有新的竞争者。 持续稳定的高ROE. 什么是股票发行注册制： 注册制不是登记备案制，股票发行上市仍要经过审核同意，但与现行核准制不同。 只要不违背国家利益和公众利益，企业能不能发行、何时发行、以什么价格发行，均应由企业和市场自主决定。 以信息披露为中心，企业必须披露充分和必要的投资决策信息，审批部门不对企业资产质量和投资价值进行判断，更不“背书”，也不对信息披露的真实性负责，但要对招股说明书的齐备性、一致性和可理解性负责。 发行人是信息披露第一责任人，中介机构承担对发行人信息披露的把关责任，投资者自主作出投资决策并自担投资风险。 实行宽进严管，政府职责重在事中事后监管，严惩违法违规，保护投资者合法权益。 推进注册制改革的核心在于理顺市场与政府的关系。 注册制的巧妙之处就在于既能较好地解决发行人与投资者信息不对称所引发的问题，又可以规范监管部门的职责边界，避免监管部门的过度干预，不再对发行人“背书”，企业业绩与价值、未来发展前景均交由投资者判断和选择，股票发行数量与价格由市场各方博弈，让市场发挥资源配置的决定性作用。 监管部门则集中精力履行好事中事后监管职责，维护好市场秩序。 创业板面临挑战： 发行、定价市场化程度 再融资、退市效率，优胜劣汰功能 前沿产业与未来科技企业不足，缺乏顶尖巨头新兴产业。 “易进易出、快进快出、大进大出+明星企业” 1.4. 上市公司相关制度我国退市的现状：退市率低 成因分析： 强制退市标准尚不完备，且可执行性较差。 退市执行力度不够，为规避退市行为提供了条件。 股票发行被人为调控，造成上市资源稀缺。 投资者权益保障不足，加大了退市难度。 直接融资渠道有限，上市公司退市后生存困难。 1.5. 债券市场防范化解债券市场风险。 两大风险：企业违约风险、部分中小金融机构和非法人产品的杠杆风险。 总体思路：坚持市场化、法治化原则，有序可控打破刚性兑付，打击逃废债行为，加强政策协调，完善监管制度，切实保护投资者利益。 政策措施： 健全市场化、法治化信用风险处置机制。如银行理财、券商资管计划等非法人产品管理人在破产重整中的法律地位。 合理控制债券市场杠杆水平。 规范债券市场信用评级，统一准入管理，建立以投资者为主导的市场化评介制度，推动投资人付费服务模式，引入评级机构强制退出机制。 加强监管协调，监测预警，信息共享和失信联合惩戒。 1.6. 衍生品市场增强实体企业利用衍生品抵御风险的能力 我国商品期货共70个品种，自2013年以来，成交量连续五年占全球一半以上。 研究表明，实体企业运用衍生品套期保值，能降低风险，提高企业价值，在经济下行期更为明显。 持续推进衍生品市场改革，扩宽服务实体经济范围。 提升企业参与衍生品市场的意愿与能力，加快国际化步伐，提升我国定价影响力。 1.7. 资本市场基础设施狭义：证券市场参机构之间用于清算、结算或记录、支付证 券的多边系统。 支付系统、中央托管机构、证券结算机构、中央对手 方、交易数据库。 广义：上述五类以外扩大到：证券、期货、保险、黄金交易 所、征信系统、法律和监管环境、公司治理、会计准 则、反洗钱以及金融安全网。 1.7.1. 如何提高基础设施建设与改革重点难点：平衡安全、效率、成本以及证券行业发展的相互关 系。安全是前提，效率是关键，成本是基础，行业 发展是支撑。四者有机整体，相辅相成。 改革内容： 基础设施集约化：债券市场3家托管结算机构 场外交易数据库建设 区域性股权市场登记、托管、评估系统。 托管模式：直接持有模式和间接持有模式。间接持有法律关系：共有权（德国），信托关系（英国），证券权益（美国） 基础设施开放：与国际结算规则接轨、DVP制度境内外联结风险评估与防范，基础设施走出去。 基础设施风险防控：跨境跨市场风险，股票/债券质押、回购、期权市场，场内场外市场。流动性风险与交收违约风险。研究债券中央借贷机制，引入安全、效率高的流动性工具，完善担保品管理，全面推广逐日盯市，精细化，标准化，自动化管理，完善法律，建立折价过户、拍卖、债务抵消等快速处理机制 基础设施统筹监管 2. 给肖主席个机会讲一讲（没时间讲PPT） 我们的资本市场是在1990年建立，（1989动乱之后），那个时候资本主义国家封锁中国经济。 成立交易所释放了坚持改革开放的信念。 我国金融学过多的运用了西方金融学的理论，但是我国金融学的内涵与西方并不一样。应当创造性地研究提出中国特色的体制。 国外学界对中国经济发展肯定，但是对金融制度抱有负面看法。那么为什么经济成功金融不行？ 3. Q&amp;A 社会需求推动政策改革还是国家改革推动社会进步？ 社会的需要推动政策的变动。 怎么能不让科创板走创业板老路？ 上交所科创板针对战略新兴产业。 创业板起初主办化，包容性较差。 创业板在科创板上市时政策变化风险较大，先看科创板改革结果。 创业板也增强了保荐责任（推荐亏损企业必须跟投） 深交所所长：什么时候能恢复深交所主板上市？ 八卦很久没有实质性内容。 政府会不会拉一个牛市。 不能出现08、15年的情形，否则会影响改革的进行。 Andy：人生经验故事？ 没干货，终身学习 如何和香港制度接轨？合作？（这个人问得不清不楚） 建设国际金融枢纽 创新要素流动方面存在障碍（人才资本土地知识产权等）","link":"/2020/11/19/%E8%82%96%E5%88%9A%E8%AE%B2%E5%BA%A7/"},{"title":"讲座记录","text":"本篇Blog用于记录参加的讲座，不定期更新。 搜索引擎的技术趋势和精准度提高【常毅】 主讲人：常毅教授，吉林大学人工智能学院院长 日期：2020/11/23 1. Introduction搜索引擎架构： 网页爬虫 倒排索引（word &gt; document 拿空间换时间的一个过程） 网页检索&amp;网页排序（0.2s内） PageRank 算法： Google最先提出的一种网页排名算法。 大众一般误认为google精准是仅仅是因为PageRank这一项技术，事实上是因为其很多黑科技的结合。 搜索引擎进化史： 1994-1998 Syntactic matching关键字匹配 1998-2006 PageRank，外加利用指向信息，点击信息等 2006-2014 垂直搜索，知识图谱 2014～ mobile search，私人助手，聊天机器人等 搜索引擎后发劣势（追赶者很难超越）：用户数据积累较少导致效果较差。 深度学习在搜索引擎里的优势远远小于我们所期待的（至少在2016年）。 2. Web search ranking review排序问题的变换： pointwise：退化为回归问题，用gradient boosting类回归 pairwise：排错对数越来越少 listwise 3. Yahoo web search ranking practice简要介绍了2015年KDD best paper的工作。 这是一个系统性的工作，并不仅仅单一的提出了一个算法。 Practical challenges： avoid ugly result on the top Semantic gap between query and document Search queues follows a long tail distributions 3.1. 排序学习的算法2010 Yahoo learning rank challenge中前十名都是使用tree-based算法。 2010年得出的结果中lambdaMart &gt; logisticRank。 2015年KDD best paper中logisticRank则好于lambdaMart和2010年结果相悖。 根据2015年的结果总结得出造成这一现象的原因是以前的community都或多或少忽略了”over 99% query-url pairs are bad”这一现象。 3.2. 查询改写的方法机器翻译需要平行语料库，需要以用户反馈来学习查询语料对训练翻译模型。 举个例子： Tesla Price =&gt; How much is a Tesla 使用用户查询关键字与点击情况进行匹配。 3.3. Click similarity feature当前存在很多feature types，如图所示： Click similarity feature是一种特征提取的方法。 通过二分图对Query进行特征构建 比deep learning效果好。 在特征提取的问题上DL不会dominant，为什么？ Web search ranking is an ‘easy’ and well studies task -李航 DL更适用数据初识表示和解决问题的合适表示相距甚远时 -周志华 DL适用于信息complete的时候，WSR中这一条件并不总是成立。","link":"/2020/11/23/%E8%AE%B2%E5%BA%A7%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Cuda","slug":"Cuda","link":"/tags/Cuda/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Master Ma","slug":"Master-Ma","link":"/tags/Master-Ma/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"MacOS","slug":"MacOS","link":"/tags/MacOS/"},{"name":"Pytorch","slug":"Pytorch","link":"/tags/Pytorch/"},{"name":"Conda","slug":"Conda","link":"/tags/Conda/"}],"categories":[{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"Utilities","slug":"Utilities","link":"/categories/Utilities/"},{"name":"Hexo","slug":"Utilities/Hexo","link":"/categories/Utilities/Hexo/"},{"name":"MacOS","slug":"Utilities/MacOS","link":"/categories/Utilities/MacOS/"},{"name":"读书笔记","slug":"读书笔记","link":"/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"Economy &amp; Finance","slug":"Economy-Finance","link":"/categories/Economy-Finance/"},{"name":"Computer Science and Engineering","slug":"Computer-Science-and-Engineering","link":"/categories/Computer-Science-and-Engineering/"}]}